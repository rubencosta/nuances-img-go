// Code generated by protoc-gen-go.
// source: img_resize.proto
// DO NOT EDIT!

/*
Package imgresizer is a generated protocol buffer package.

It is generated from these files:
	img_resize.proto

It has these top-level messages:
	ImgUrl
*/
package imgresizer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ImgUrl struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ImgUrl) Reset()                    { *m = ImgUrl{} }
func (m *ImgUrl) String() string            { return proto.CompactTextString(m) }
func (*ImgUrl) ProtoMessage()               {}
func (*ImgUrl) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*ImgUrl)(nil), "imgresizer.ImgUrl")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for ImgResizer service

type ImgResizerClient interface {
	ProcessImg(ctx context.Context, in *ImgUrl, opts ...grpc.CallOption) (*ImgUrl, error)
}

type imgResizerClient struct {
	cc *grpc.ClientConn
}

func NewImgResizerClient(cc *grpc.ClientConn) ImgResizerClient {
	return &imgResizerClient{cc}
}

func (c *imgResizerClient) ProcessImg(ctx context.Context, in *ImgUrl, opts ...grpc.CallOption) (*ImgUrl, error) {
	out := new(ImgUrl)
	err := grpc.Invoke(ctx, "/imgresizer.ImgResizer/ProcessImg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ImgResizer service

type ImgResizerServer interface {
	ProcessImg(context.Context, *ImgUrl) (*ImgUrl, error)
}

func RegisterImgResizerServer(s *grpc.Server, srv ImgResizerServer) {
	s.RegisterService(&_ImgResizer_serviceDesc, srv)
}

func _ImgResizer_ProcessImg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ImgUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ImgResizerServer).ProcessImg(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _ImgResizer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "imgresizer.ImgResizer",
	HandlerType: (*ImgResizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessImg",
			Handler:    _ImgResizer_ProcessImg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 115 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0xc8, 0xcc, 0x4d, 0x8f,
	0x2f, 0x4a, 0x2d, 0xce, 0xac, 0x4a, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x02, 0x8a,
	0x40, 0x04, 0x8a, 0x94, 0xa4, 0xb8, 0xd8, 0x3c, 0x73, 0xd3, 0x43, 0x8b, 0x72, 0x84, 0x04, 0xb8,
	0x98, 0x4b, 0x8b, 0x72, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x23, 0x17, 0x2e,
	0x2e, 0xa0, 0x5c, 0x10, 0x44, 0xa5, 0x90, 0x19, 0x17, 0x57, 0x40, 0x51, 0x7e, 0x72, 0x6a, 0x71,
	0x31, 0x50, 0x50, 0x48, 0x48, 0x0f, 0x61, 0x88, 0x1e, 0xc4, 0x04, 0x29, 0x2c, 0x62, 0x4a, 0x0c,
	0x49, 0x6c, 0x60, 0x4b, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x49, 0x66, 0x7f, 0x88,
	0x00, 0x00, 0x00,
}
